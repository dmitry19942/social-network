{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/common/Button/Button.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/common/Button/Button.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","Button","className","s","button","onClick","name","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileInfo","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","isOwner","target","files","length","savePhoto","initialValues","formData","saveProfile","then","goToEditMode","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","Post","item","message","like","likesCount","MyPosts","React","memo","postsElements","posts","reverse","p","id","postsBlock","AddPostReduxForm","values","newPostText","trim","addPost","maxLength100","maxLengthCreator","Field","component","placeholder","validate","required","onKeyPress","MyPostsContainer","profilePage","dispatch","Profile","ProfileAPIContainer","userId","this","match","params","authorizedUserId","history","push","setUserProfileThunkCreator","getStatusThunkCreator","refreshProfile","prevProps","prevState","updateStatusThunkCreator","savePhotoThunkCreator","saveProfileThunkCreator","compose","withRouter"],"mappings":"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","file":"static/js/3.8cd2ee98.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if(!isAuth) return <Redirect to={'/social-network/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__30lGR\",\"img\":\"ProfileInfo_img__22Ie5\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1-G_8\",\"contact\":\"ProfileInfo_contact__48AAV\",\"button\":\"ProfileInfo_button__224hj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3CC4i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3qwSj\",\"posts\":\"MyPosts_posts__1juom\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"like\":\"Post_like__pSu4s\",\"item\":\"Post_item__3dw9H\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n// types\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n// component\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {!editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={activateEditMode}> <b>Status</b>: {props.status || '----'}</span>\r\n                    </div>\r\n                }\r\n                {editMode &&\r\n                    <div>\r\n                        <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick?: () => void\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    return (\r\n        <button className={s.button} onClick={props.onClick}>\r\n            {props.name}\r\n        </button>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile_PropsType} from \"./ProfileInfo\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from './../../common/FormControls/FormControls.module.css'\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormControls/FormControls\";\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\n// types\r\ntype PropsType = {\r\n    profile: Profile_PropsType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<Profile_PropsType>\r\n\r\n// component\r\nconst ProfileDataForm: React.FC<InjectedFormProps<Profile_PropsType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <Button name={'save'}/>\r\n        {error && <div className={s.formSummaryError} >\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            { createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            { createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea  )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                {/* todo: create some solution for embedded objects */}\r\n                <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<Profile_PropsType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\n//types\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type Profile_PropsType  = {\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    userId: number\r\n    photos: PhotosType\r\n}\r\ntype ProfileInfoPropsType = {\r\n    profile: Profile_PropsType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: Profile_PropsType) => Promise<any>\r\n}\r\ntype ProfileDataPropsType = {\r\n    profile: Profile_PropsType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\n// component\r\nexport function ProfileInfo(props: ProfileInfoPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if(!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: Profile_PropsType) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"\"/>\r\n            {props.isOwner && <input className={s.button} type={'file'} onChange={onMainPhotoSelected}/>}\r\n            { editMode ?  <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit} /> : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => {setEditMode(true)}} /> }\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div><Button name={'edit'} onClick={goToEditMode} /> </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {\r\n            Object\r\n                .keys(profile.contacts)\r\n                .map((key)  => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\n// types\r\ntype PostType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n// component\r\nexport function Post(props: PostType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://likevideogid.ru/wp-content/uploads/2019/11/likee_avatarka.jpg\" alt=''/>\r\n            {props.message}\r\n            <div>\r\n                <span className={s.like}>like:</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {KeyboardEvent} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\n// types\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\n// component\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n    let postsElements = [...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let addNewPost = (values: FormDataType) => {\r\n        if (values.newPostText.trim() !== '') {\r\n            props.addPost(values.newPostText.trim())\r\n            values.newPostText = ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2>My posts</h2>\r\n            <div>\r\n                <AddPostReduxForm onSubmit={addNewPost} />\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    const onClickHandler = () => {\r\n\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newPostText'} placeholder={'Enter your post'} validate={[required, maxLength100]} onKeyPress={onKeyPressHandler} />\r\n            </div>\r\n            <div>\r\n                <Button name={'Add post'} />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'profileAddPostForm'})(AddPostForm)\r\n\r\n","import {addPost, PostsType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// types\r\ntype MapStateToPropsType = {\r\n    posts: PostsType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n// container\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPost(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport {Profile_PropsType, ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\n\r\n// types\r\ntype ProfilePropsType = {\r\n    profile: Profile_PropsType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: Profile_PropsType) => Promise<any>\r\n}\r\n\r\n// component\r\nexport function Profile(props: ProfilePropsType) {\r\n    return <div>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} isOwner={props.isOwner} savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\r\n        <MyPostsContainer />\r\n    </div>\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    setUserProfileThunkCreator,\r\n    getStatusThunkCreator,\r\n    updateStatusThunkCreator,\r\n    savePhotoThunkCreator, saveProfileThunkCreator\r\n} from \"../../redux/profile-reducer\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {Profile_PropsType} from \"./ProfileInfo/ProfileInfo\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n// types\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: Profile_PropsType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setUserProfileThunkCreator: (userId: number | null) => void\r\n    getStatusThunkCreator: (userId: number | null) => void\r\n    updateStatusThunkCreator: (status: string) => void\r\n    savePhotoThunkCreator: (file: File) => void\r\n    saveProfileThunkCreator: (profile: Profile_PropsType) => Promise<any>\r\n}\r\ntype ProfileAPIContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileAPIContainerPropsType\r\n\r\n// component\r\nexport class ProfileAPIContainer extends React.Component<PropsType, AppRootStateType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if(!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/social-network/login')\r\n            }\r\n        }\r\n        this.props.setUserProfileThunkCreator(userId)\r\n        this.props.getStatusThunkCreator(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RouteComponentProps<PathParamsType>>, prevState: Readonly<AppRootStateType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n           <Profile profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatusThunkCreator}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    savePhoto={this.props.savePhotoThunkCreator}\r\n                    saveProfile={this.props.saveProfileThunkCreator}\r\n           />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfileThunkCreator, getStatusThunkCreator, updateStatusThunkCreator, savePhotoThunkCreator, saveProfileThunkCreator}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileAPIContainer)"],"sourceRoot":""}