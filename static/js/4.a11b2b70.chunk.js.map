{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","path","id","className","s","dialog","active","name","Message","message","messages","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","compose","dialogs","dialogsPage","dispatch","sendMessage","newMessageBody","dialogsElements","map","d","messagesElements","m","dialogsItems","values","trim"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,iICQxIC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAQhC,OAAOC,YAAQN,EAARM,EANmB,SAACC,GACvB,IAAKL,EAAwBK,EAAxBL,OAAWM,EAAhB,YAA6BD,EAA7B,GACA,OAAIL,EACG,cAACG,EAAD,eAAeG,IADH,cAAC,IAAD,CAAUC,GAAI,gB,6FCR5BC,EAAa,SAACH,GACvB,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAASP,GAAIE,EAAb,SAAoBJ,EAAMU,UCJrBC,EAAU,SAACX,GACpB,OAAO,qBAAKM,UAAWC,IAAEK,QAAlB,SAA4BZ,EAAMa,Y,kCCgCvCC,EAAcC,YAAiB,IAa/BC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAXuC,SAACjB,GAChE,OACA,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAcJ,KAAM,iBAAkBgB,YAAa,yBAExG,8BAAK,kD,wBCbEC,sBACX5B,aAhBoB,SAACL,GACrB,MAAO,CACHkC,QAASlC,EAAMmC,YAAYD,QAC3Bf,SAAUnB,EAAMmC,YAAYhB,aAIT,SAACiB,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,EAASC,YAAYC,SAO7BnC,IAFW8B,EDvBQ,SAAC3B,GAEpB,IAAIiC,EAAkBjC,EAAM4B,QAAQM,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBzB,KAAMyB,EAAEzB,KAAML,GAAI8B,EAAE9B,IAA1B8B,EAAE9B,OAC7D+B,EAAmBpC,EAAMa,SAASqB,KAAK,SAAAG,GAAC,OAAI,cAAC,EAAD,CAAoBxB,SAAUwB,EAAExB,SAAUR,GAAIgC,EAAEhC,IAAlCgC,EAAEhC,OAUhE,OACI,sBAAKC,UAAWC,IAAEqB,QAAlB,UACI,qBAAKtB,UAAWC,IAAE+B,aAAlB,SACML,IAEN,sBAAK3B,UAAWC,IAAEM,SAAlB,UACI,8BAAOuB,IACP,8BACI,cAACpB,EAAD,CAAqBG,SAfjB,SAACoB,GACoB,KAAjCA,EAAOP,eAAeQ,SACtBxC,EAAM+B,YAAYQ,EAAOP,eAAeQ,QACxCD,EAAOP,eAAiB","file":"static/js/4.a11b2b70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Qqv4\",\"dialogsItems\":\"Dialogs_dialogsItems__kD1r2\",\"active\":\"Dialogs_active__13x0l\",\"messages\":\"Dialogs_messages__4eULh\"};","import React, {ComponentType} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if(!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css'\r\n\r\n// types\r\nexport type DialogsItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n// component\r\nexport const DialogItem = (props:DialogsItemType) => {\r\n    let path = '/dialogs/' + props.id\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\n\r\n// types\r\nexport type MessagesType = {\r\n    id: number\r\n    messages: string\r\n}\r\n\r\n// component\r\nexport const Message = (props:MessagesType) => {\r\n    return <div className={s.message}>{props.messages}\r\n    </div>\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators\";\r\n\r\n// types\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\n// component\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogs.map( d => <DialogItem key={d.id} name={d.name} id={d.id} /> )\r\n    let messagesElements = props.messages.map( m => <Message key={m.id} messages={m.messages} id={m.id} />)\r\n\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        if (values.newMessageBody.trim() !== '') {\r\n            props.sendMessage(values.newMessageBody.trim())\r\n            values.newMessageBody = ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n                <div>\r\n                    <AddMessageReduxForm onSubmit={addNewMessage}  />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm:  React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n    <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} validate={[required, maxLength50]} name={'newMessageBody'} placeholder={'Enter your message'}/>\r\n        </div>\r\n        <div><button>Send</button></div>\r\n    </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\n\r\n","import {\r\n    DialogsItemType,\r\n    MessagesType,\r\n    sendMessage\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n// types\r\ntype MapStateToPropsType = {\r\n    dialogs: DialogsItemType[]\r\n    messages: MessagesType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n// container\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessage(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n"],"sourceRoot":""}