{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["ChatPage","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListeningThunkCreator","stopMessagesListeningThunkCreator","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","current","scrollIntoView","style","height","overflow","map","m","index","Message","message","id","ref","React","memo","to","userId","src","photo","width","marginRight","alt","userName","setMessage","onChange","e","currentTarget","value","name","onClick","alert","sendMessageThunkCreator","disabled"],"mappings":"6OAYaA,EAAqB,WAC9B,OAAO,8BACH,cAACC,EAAD,KAEP,EAEKA,EAAiB,WACnB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAA6BA,EAAMC,KAAKH,MAAxC,IAS3B,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,cACZ,CACJ,GAAE,IAEI,gCACU,UAAXN,GAAsB,8BAAK,iDACzB,qCACI,cAACO,EAAD,IACA,cAACC,EAAD,SAGf,EAEKD,EAAqB,WACvB,IAAME,EAAWR,aAAY,SAACC,GAAD,OAA6BA,EAAMC,KAAKM,QAAxC,IACvBC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,6BAeA,OAJAR,qBAAU,WAAO,IAAD,EACZ,UAAAM,EAAkBG,eAAlB,SAA2BC,gBAAe,EAC7C,GAAE,CAACL,IAEG,sBAAKM,MAAO,CAACC,OAAQ,QAASC,SAAU,QAAxC,UACFR,EAASS,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,GAA9B,IACd,qBAAKC,IAAKd,MAEjB,EAEKW,EAAmDI,IAAMC,MAAM,YAAgB,IAAdJ,EAAa,EAAbA,QACnE,OAAO,gCACH,eAAC,IAAD,CAASK,GAAI,2BAA6BL,EAAQM,OAAlD,UACA,qBAAKC,IAAKP,EAAQQ,MAAOf,MAAO,CAACgB,MAAO,OAAQC,YAAa,OAAQC,IAAI,KACrE,4BAAIX,EAAQY,cAEhB,uBACCZ,EAAQA,QACT,yBAEP,IAEKd,EAA2B,WAC7B,MAA8BI,mBAAS,IAAvC,mBAAOU,EAAP,KAAgBa,EAAhB,KACMrC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAA6BA,EAAMC,KAAKH,MAAxC,IAU3B,OAAO,gCACH,8BACI,0BAAUoC,SAAU,SAACC,GAAD,OAAOF,EAAWE,EAAEC,cAAcC,MAAlC,EAA0CA,MAAOjB,MAEzE,8BACI,cAAC,IAAD,CAAQkB,KAAM,OAAQC,QAbH,WACvB,IAAKnB,EACD,OAAOoB,MAAM,gCAEjB5C,EAAS6C,YAAwBrB,IACjCa,EAAW,GACd,EAO0DS,SAAqB,UAAX5C,QAGxE,EAEcJ,W","file":"static/js/5.d754abb6.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    ChatMessageAPIType,\r\n    sendMessageThunkCreator,\r\n    startMessagesListeningThunkCreator,\r\n    stopMessagesListeningThunkCreator\r\n} from \"../../redux/chat-reducer\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {Button} from \"../../components/common/Button/Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppRootStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListeningThunkCreator())\r\n        return () => {\r\n            dispatch(stopMessagesListeningThunkCreator())\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        { status === 'error' && <div>Some error occurred. Please refresh the page</div> }\r\n            <>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </>\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n    const messages = useSelector((state: AppRootStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        messagesAnchorRef.current?.scrollIntoView(true);\r\n    }, [messages]);\r\n\r\n    return <div style={{height: '400px', overflow: 'auto'}}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\nconst Message: React.FC<{message: ChatMessageAPIType}> = React.memo( ({message}) => {\r\n    return <div>\r\n        <NavLink to={'/social-network/profile/' + message.userId}>\r\n        <img src={message.photo} style={{width: '30px', marginRight: '5px'}} alt=''/>\r\n            <b>{message.userName}</b>\r\n        </NavLink>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n})\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppRootStateType) => state.chat.status)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return alert('empty message cannot be sent')\r\n        }\r\n        dispatch(sendMessageThunkCreator(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <Button name={'Send'} onClick={sendMessageHandler} disabled={status !== 'ready'} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}