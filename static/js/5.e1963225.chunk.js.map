{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessageForm","messages","setMessages","messageHandler","e","newMessages","JSON","parse","data","prevMessages","style","height","overflow","map","m","index","Message","message","src","photo","width","alt","userName","setMessage","readyStatus","setReadyStatus","openHandler","onChange","currentTarget","value","disabled","onClick","send","ChatPage"],"mappings":"kKAeMA,EAAiB,WACnB,MAAkCC,mBAA2B,MAA7D,mBAAOC,EAAP,KAAkBC,EAAlB,KAwBA,OAtBAC,qBAAU,WACN,IAAIC,EACEC,EAAe,WACjBC,WAAWC,EAAe,MAG9B,SAASA,IAAiB,IAAD,IACf,QAAF,EAAAH,SAAA,SAAII,oBAAoB,QAASH,GAC/B,QAAF,EAAAD,SAAA,SAAIK,SAERL,EAAK,IAAIM,UAAU,iEAChBC,iBAAiB,QAASN,GAC7BH,EAAaE,GAIjB,OAFAG,IAEO,WACHH,EAAGI,oBAAoB,QAASH,GAChCD,EAAGK,WAER,IAEI,gCACH,cAACG,EAAD,CAAUX,UAAWA,IACrB,cAACY,EAAD,CAAgBZ,UAAWA,QAI7BW,EAAoD,SAAC,GAAiB,IAAhBX,EAAe,EAAfA,UACxD,EAAgCD,mBAA4B,IAA5D,mBAAOc,EAAP,KAAiBC,EAAjB,KAcA,OAZAZ,qBAAU,WACN,IAAIa,EAAiB,SAACC,GAClB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BN,GAAY,SAACO,GAAD,4BAAqBA,GAArB,YAAsCJ,QAItD,OAFS,OAATjB,QAAS,IAATA,KAAWU,iBAAiB,UAAWK,GAEhC,WACM,OAATf,QAAS,IAATA,KAAWO,oBAAoB,UAAWQ,MAE/C,CAACf,IAEG,qBAAKsB,MAAO,CAACC,OAAQ,QAASC,SAAU,QAAxC,SACFX,EAASY,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAqBC,QAASH,GAAhBC,SAI5CC,EAAgD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpD,OAAO,gCACH,qBAAKC,IAAKD,EAAQE,MAAOT,MAAO,CAACU,MAAO,QAASC,IAAI,KADlD,IACuD,4BAAIJ,EAAQK,WACtE,uBACCL,EAAQA,QACT,2BAIFjB,EAA0D,SAAC,GAAiB,IAAhBZ,EAAe,EAAfA,UAC9D,EAA8BD,mBAAS,IAAvC,mBAAO8B,EAAP,KAAgBM,EAAhB,KACA,EAAsCpC,mBAA8B,WAApE,mBAAOqC,EAAP,KAAoBC,EAApB,KAEAnC,qBAAU,WACN,IAAIoC,EAAc,WACdD,EAAe,UAInB,OADS,OAATrC,QAAS,IAATA,KAAWU,iBAAiB,OAAQ4B,GAC7B,WACM,OAATtC,QAAS,IAATA,KAAWO,oBAAoB,OAAQ+B,MAE5C,CAACtC,IAUJ,OAAO,gCACH,8BACI,0BAAUuC,SAAU,SAACvB,GAAD,OAAOmB,EAAWnB,EAAEwB,cAAcC,QAAQA,MAAOZ,MAEzE,8BACI,wBAAQa,SAAwB,OAAd1C,GAAsC,UAAhBoC,EAAyBO,QAbrD,WACXd,IAGI,OAAT7B,QAAS,IAATA,KAAW4C,KAAKf,GAChBM,EAAW,MAQP,wBAKGU,UAnGY,WACvB,OAAO,8BACH,cAAC/C,EAAD","file":"static/js/5.e1963225.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\r\n    useEffect(() => {\r\n        let ws: WebSocket;\r\n        const closeHandler = () => {\r\n            setTimeout(createChannel, 3000)\r\n        }\r\n\r\n        function createChannel() {\r\n                ws?.removeEventListener('close', closeHandler)\r\n                ws?.close()\r\n\r\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n            ws.addEventListener('close', closeHandler)\r\n            setWsChannel(ws)\r\n        }\r\n        createChannel()\r\n\r\n        return () => {\r\n            ws.removeEventListener('close', closeHandler)\r\n            ws.close()\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        <Messages wsChannel={wsChannel} />\r\n        <AddMessageForm wsChannel={wsChannel}  />\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{wsChannel: WebSocket | null}> = ({wsChannel}) => {\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n    useEffect(() => {\r\n        let messageHandler = (e: MessageEvent) => {\r\n            let newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages) =>[...prevMessages, ...newMessages])\r\n        }\r\n        wsChannel?.addEventListener('message', messageHandler)\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('message', messageHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    return <div style={{height: '400px', overflow: 'auto'}}>\r\n        {messages.map((m, index) => <Message key={index} message={m} />)}\r\n    </div>\r\n}\r\n\r\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\r\n    return <div>\r\n        <img src={message.photo} style={{width: '30px'}} alt=''/> <b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n}\r\n\r\nconst AddMessageForm: React.FC<{wsChannel: WebSocket | null}> = ({wsChannel}) => {\r\n    const [message, setMessage] = useState('')\r\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\n    useEffect(() => {\r\n        let openHandler = () => {\r\n            setReadyStatus('ready')\r\n        }\r\n\r\n        wsChannel?.addEventListener('open', openHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener('open', openHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        wsChannel?.send(message)\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={wsChannel === null || readyStatus !== 'ready'} onClick={sendMessage}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}