{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","Preloader","className","s","img","src","alt","descriptionBlock","photos","large","userPhoto","mainPhoto","isOwner","type","target","files","length","savePhoto","fullName","aboutMe","Post","item","message","likesCount","MyPosts","React","memo","postsElements","posts","reverse","map","p","id","postsBlock","AddPostReduxForm","onSubmit","values","addPost","newPostText","maxLenght30","maxLenghtCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","profilePage","dispatch","Profile","ProfileAPIContainer","userId","this","match","params","authorizedUserId","history","push","setUserProfileThunkCreator","getStatusThunkCreator","refreshProfile","prevProps","prevState","updateStatusThunkCreator","savePhotoThunkCreator","compose","withRouter"],"mappings":"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","file":"static/js/3.47b68afa.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if(!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__30lGR\",\"img\":\"ProfileInfo_img__22Ie5\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1-G_8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3qwSj\",\"posts\":\"MyPosts_posts__1juom\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3dw9H\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {!editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\r\n                    </div>\r\n                }\r\n                {editMode &&\r\n                    <div>\r\n                        <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.jpg\";\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type Profile_PropsType  = {\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    userId: number\r\n    photos: PhotosType\r\n}\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: Profile_PropsType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport function ProfileInfo(props: ProfileInfoPropsType) {\r\n    if(!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <div>\r\n            <img className={s.img}\r\n                src='https://www.study.ru/uploads/server/jqMeRR0Fw70d5uNi.jpg' alt='' />\r\n        </div>\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"\"/>\r\n            {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n            <div>{props.profile.fullName}</div>\r\n            <div>{props.profile.aboutMe}</div>\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n        </div>\r\n    </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport function Post(props: PostType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://likevideogid.ru/wp-content/uploads/2019/11/likee_avatarka.jpg\" alt=''/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLenghtCreator, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    let postsElements = [...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let addNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddPostReduxForm onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLenght30 = maxLenghtCreator(30)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newPostText'} placeholder={'Enter your post'} validate={[required, maxLenght30]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'profileAddPostForm'})(AddPostForm)\r\n\r\n","import {addPost, PostsType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostsType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPost(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport {Profile_PropsType, ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: Profile_PropsType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n\r\n    return <div>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} isOwner={props.isOwner} savePhoto={props.savePhoto}/>\r\n        <MyPostsContainer />\r\n    </div>\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    setUserProfileThunkCreator,\r\n    getStatusThunkCreator,\r\n    updateStatusThunkCreator,\r\n    savePhotoThunkCreator\r\n} from \"../../redux/profile-reducer\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {Profile_PropsType} from \"./ProfileInfo/ProfileInfo\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: Profile_PropsType | null\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    setUserProfileThunkCreator: (userId: string) => void\r\n    getStatusThunkCreator: (userId: string) => void\r\n    updateStatusThunkCreator: (status: string) => void\r\n    savePhotoThunkCreator: (file: any) => void\r\n}\r\n\r\n\r\ntype ProfileAPIContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileAPIContainerPropsType\r\n\r\nexport class ProfileAPIContainer extends React.Component<PropsType, AppRootStateType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.setUserProfileThunkCreator(userId)\r\n        this.props.getStatusThunkCreator(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RouteComponentProps<PathParamsType>>, prevState: Readonly<AppRootStateType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n           <Profile profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatusThunkCreator}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    savePhoto={this.props.savePhotoThunkCreator}\r\n           />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfileThunkCreator, getStatusThunkCreator, updateStatusThunkCreator, savePhotoThunkCreator}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileAPIContainer)"],"sourceRoot":""}